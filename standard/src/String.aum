--
-- Part of the Austral project, under the Apache License v2.0 with LLVM Exceptions.
-- See LICENSE file for details.
--
-- SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
--
import Standard.Buffer (
    Buffer,
    allocateEmpty,
    initialize,
    destroyFree,
    length as bufLength,
    nth as bufNth,
    storeNth as bufStoreNth,
    getSpan as bufferGetSpan,
    getSpanMut as bufferGetSpanMut
);
import Standard.Equality (
    Equality
);
import Standard.Order (
    Equal,
    GreaterThan,
    LessThan,
    Ordering,
    TotalOrder
);

module body Standard.String is
    record String: Linear is
        buf: Buffer[Nat8];
    end;

    ---
    --- Lifecycle
    ---

    function makeEmpty(): String is
        let buf: Buffer[Nat8] := allocateEmpty();
        return String(
            buf => buf
        );
    end;

    function makeString(size: Index, initial: Nat8): String is
        let buf: Buffer[Nat8] := initialize(size, initial);
        return String(
            buf => buf
        );
    end;

    function fromLiteral(arr: Span[Nat8, Static]): String is
        let size: Index := spanLength(arr);
        var str: String := makeString(size, ' ');
        if size > 0 then
            for i from 0 to size - 1 do
                storeNth(&!str, i, arr[i]);
            end for;
        end if;
        return str;
    end;

    function destroyString(str: String): Unit is
        let { buf: Buffer[Nat8] } := str;
        destroyFree(buf);
        return nil;
    end;

    function fromByteBuffer(buffer: Buffer[Nat8]): String is
        return String(buf => buffer);
    end;

    ---
    --- Retrieve
    ---

    generic [R: Region]
    function length(string: &[String, R]): Index is
        return bufLength(&(string->buf));
    end;

    generic [R: Region]
    function nthByte(string: &[String, R], pos: Index): Nat8 is
        return bufNth(&(string->buf), pos);
    end;

    ---
    --- Update
    ---

    """
    Write a byte to the given position in the string.
    """
    generic [R: Region]
    function storeNth(string: &![String, R], pos: Index, byte: Nat8): Unit is
        return bufStoreNth(&(string->buf), pos, byte);
    end;

    ---
    --- Spans
    ---

    generic [R: Region]
    function getSpan(string: &[String, R], start: Index, final: Index): Span[Nat8, R] is
        return bufferGetSpan(&(string->buf), start, final);
    end;

    generic [R: Region]
    function getSpanAll(string: &[String, R]): Span[Nat8, R] is
        return getSpan(string, 0, length(string) - 1);
    end;

    generic [R: Region]
    function getSpanMut(string: &![String, R], start: Index, final: Index): Span![Nat8, R] is
        return bufferGetSpanMut(&(string->buf), start, final);
    end;

    ---
    --- Instances
    ---
    instance Equality(String) is
        generic [R: Region, S: Region]
        method equal(a: &[String, R], b: &[String, S]): Bool is
            let lenA: Index := length(a);
            let lenB: Index := length(b);
            if lenA = lenB then
                var i: Index := 0;
                while i < lenA do
                    if nthByte(a, i) /= nthByte(b, i) then
                        return false;
                    end if;
                    i := i + 1;
                end while;
                return true;
            else
                return false;
            end if;
        end;
    end;

    instance TotalOrder(String) is
        generic [R: Region, S: Region]
        method compare(a: &[String, R], b: &[String, S]): Ordering is
            let lenA: Index := length(a);
            let lenB: Index := length(b);
            var i: Index := 0;
            while (i < lenA) and (i < lenB) do
                let byteA: Nat8 := nthByte(a, i);
                let byteB: Nat8 := nthByte(b, i);
                if byteA < byteB then
                    return LessThan();
                else if byteA > byteB then
                    return GreaterThan();
                end if;
                i := i + 1;
            end while;
            if lenA = lenB then
                return Equal();
            else if i = lenA then
                return LessThan();
            else
                return GreaterThan();
            end if;
        end;
    end;
end module body.
